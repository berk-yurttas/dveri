services:
  postgres:
    image: postgres:16
    env_file:
      - .env
    container_name: postgres-db
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dt_report}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sensor_default
    restart: unless-stopped

  ivme-postgresql:
    image: postgres:16
    container_name: ivme-postgres-db
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: ivmedb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ivme_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sensor_default
    restart: unless-stopped

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    env_file:
      - ./etl/.env
    container_name: clickhouse-server
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - sensor_default
    restart: unless-stopped
  transfer:
    build: ./etl
    env_file:
      - ./etl/.env
    container_name: python-clickhouse-app
    depends_on:
      clickhouse:
        condition: service_started
    environment:
      CLICKHOUSE_HOST: ${CLICKHOUSE_HOST}
      CLICKHOUSE_PORT: ${CLICKHOUSE_PORT}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      MSSQL_HOST: ${MSSQL_HOST}
      MSSQL_PORT: ${MSSQL_PORT}
      MSSQL_USER: ${MSSQL_USER}
      MSSQL_PASSWORD: ${MSSQL_PASSWORD}
      MSSQL_DATABASE: master
    volumes:
      - ./etl:/app
    command: sh -c "while true; do echo 'Running transfer at '$(date); python transfer.py; echo 'Transfer completed, sleeping for 5 minutes...'; sleep 300; done"
    restart: unless-stopped

  dtbackend:
    container_name: dtbackend
    build:
      context: .
      dockerfile: dtbackend/Dockerfile
    ports:
      - "${DTBACKEND_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - dtbackend/.env
    networks:
      - sensor_default
    restart: unless-stopped

  dtfrontend:
    container_name: dtfrontend
    build:
      context: .
      dockerfile: dtfrontend/Dockerfile
    ports:
      - "${DTFRONTEND_PORT}:3000"
    depends_on:
      - dtbackend
    env_file:
      - dtfrontend/.env
    restart: unless-stopped
volumes:
  postgres_data:
  clickhouse_data:
  mssql_data:
  ivme_postgres_data:

networks:
  sensor_default:
    external: true